const fs = require('fs')
const path = require('path')

// Read site URL from env or fallback
const SITE_URL = process.env.SITE_URL || 'https://yourdomain.com'

function uniq(arr) {
  return Array.from(new Set(arr))
}

function extractRoutesFromApp(appContent) {
  const routes = []
  // Match <Route ... path="/something" ... />
  const routeRegex = /<Route[^>]*\bpath\s*=\s*["']([^"']+)["'][^>]*>/g
  let m
  while ((m = routeRegex.exec(appContent)) !== null) {
    routes.push(m[1])
  }

  // Also capture Link to="/path"
  const linkRegex = /<Link[^>]*\bto\s*=\s*["']([^"']+)["'][^>]*>/g
  while ((m = linkRegex.exec(appContent)) !== null) {
    routes.push(m[1])
  }

  return uniq(routes)
}

function extractPagesFromDir(pagesDir) {
  if (!fs.existsSync(pagesDir)) return []
  const files = fs.readdirSync(pagesDir)
  const pages = files
    .filter((f) => f.endsWith('.tsx') || f.endsWith('.jsx') || f.endsWith('.js') || f.endsWith('.ts'))
    .map((f) => {
      const name = f.replace(/\.(t|j)sx?$/, '')
      if (name.toLowerCase() === 'home' || name.toLowerCase() === 'index') return '/'
      return `/${name.toLowerCase()}`
    })
  return uniq(pages)
}

let pages = []
const appPath = path.join(process.cwd(), 'src', 'App.tsx')
if (fs.existsSync(appPath)) {
  try {
    const content = fs.readFileSync(appPath, 'utf8')
    pages = extractRoutesFromApp(content)
  } catch (err) {
    console.warn('Could not read src/App.tsx:', err.message)
  }
}

// If no routes found from App.tsx, fall back to scanning src/pages
if (!pages || pages.length === 0) {
  const pagesDir = path.join(process.cwd(), 'src', 'pages')
  pages = extractPagesFromDir(pagesDir)
}

// Normalize and filter out dynamic routes
pages = pages
  .map((p) => (p === '' ? '/' : p))
  .filter((p) => typeof p === 'string')
  .filter((p) => !p.includes(':') && !p.includes('*'))

// Ensure root is included
if (!pages.includes('/')) pages.unshift('/')

pages = uniq(pages)

const urls = pages
  .map((p) => {
    const priority = p === '/' ? '1.00' : '0.80'
    const loc = `${SITE_URL.replace(/\/$/, '')}${p}`
    return `  <url>\n    <loc>${loc}</loc>\n    <priority>${priority}</priority>\n  </url>`
  })
  .join('\n')

const headerComment = `<!--\n  NOTE: This file is auto-generated by \`scripts/generate-sitemap.js\`.\n  Do not edit this file manually. To update sitemap entries, edit your\n  route definitions (e.g. \`src/App.tsx\`) or update the generator script.\n-->`

const sitemap = `<?xml version="1.0" encoding="UTF-8"?>\n${headerComment}\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n${urls}\n</urlset>`

// Overwrite sitemap.xml with generated content (header included)
fs.writeFileSync(path.join(process.cwd(), 'sitemap.xml'), sitemap)
console.log('sitemap.xml generated with routes:', pages)

// Also write to dist when available
const distPath = path.join(process.cwd(), 'dist')
if (fs.existsSync(distPath)) {
  fs.writeFileSync(path.join(distPath, 'sitemap.xml'), sitemap)
  console.log('sitemap.xml written to dist/')
}
